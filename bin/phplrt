#!/usr/bin/env php
<?php
/**
 * This file is part of Phplrt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
declare(strict_types=1);

use Symfony\Component\Console\Application;

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

$autoloadPaths = [
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../../../autoload.php',
    __DIR__ . '/vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
];


foreach ($autoloadPaths as $path) {
    if (\is_file($path) && \is_readable($path)) {
        /** @var \Composer\Autoload\ClassLoader $classLoader */
        $classLoader = require_once $path;
        break;
    }
}


if (! isset($classLoader) || ! $classLoader) {
    $error =
        'Could not find autoload.php file.' . \PHP_EOL .
        'You need to set up the project dependencies using Composer:' . \PHP_EOL . \PHP_EOL .
        '    composer install' . \PHP_EOL . \PHP_EOL .
        'You can learn all about Composer on https://getcomposer.org/.' . \PHP_EOL;

    throw new \LogicException($error);
}


/*
|--------------------------------------------------------------------------
| Run The Console Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

try {

    $app = new Application();

    $app->add(new \Phplrt\Compiler\Console\CompileCommand());
    $app->add(new \Phplrt\Compiler\Console\GrammarCompileCommand());

    $code = $app->run();

} catch (\Throwable $e) {
    \fwrite(\STDERR, $e->getMessage());
    $code = $e->getCode() ?: 1;
} finally {
    exit($code);
}
